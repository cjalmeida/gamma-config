#!/usr/bin/env python3
import os
import re
import subprocess
from collections import defaultdict
from io import BytesIO
from pathlib import Path

import dotenv
import httpx
import jinja2
from azure.storage.blob import BlobServiceClient, ContentSettings

dotenv.load_dotenv(".env")
dotenv.load_dotenv(".local.env")

BASE = "https://github.gamma.bcg.com/api/v3"
REPO = "BCG/gamma-config"

AZURE_ACCOUNT = "https://gammatools.blob.core.windows.net"
AZURE_CONTAINER = "config"
AZURE_BASE_URL = f"{AZURE_ACCOUNT}/{AZURE_CONTAINER}"

gh_user = os.getenv("GITHUB_USER")
gh_token = os.getenv("GITHUB_TOKEN")
azure_token = os.getenv("AZURE_TOKEN")
skip_github = os.getenv("SKIP_GITHUB", "0") in ("1", "true")
skip_azure = os.getenv("SKIP_AZURE", "0") in ("1", "true")
allow_dirty = os.getenv("ALLOW_DIRTY", "0") in ("1", "true")


def publish():
    if not gh_token and not skip_github:
        print("ERROR: Missing GITHUB_TOKEN. You need a Github personal access token.")
        raise SystemExit(1)

    if not gh_user and not skip_github:
        print("ERROR: Missing GITHUB_USER. You need a Github personal access token.")
        raise SystemExit(1)

    if not azure_token and not skip_azure:
        msg = "ERROR: Missing AZURE_TOKEN. You need a SAS token for the storage account"
        print(msg)
        raise SystemExit(1)

    cp = subprocess.run("git status -s", shell=True, check=True, stdout=subprocess.PIPE)
    dirty = cp.stdout.strip() != b""

    if dirty and not allow_dirty:
        print("ERROR: Repository is dirty")
        raise SystemExit(1)

    if "VERSION" not in os.environ:
        cp = subprocess.run(
            "git describe", shell=True, check=True, stdout=subprocess.PIPE
        )
        version = cp.stdout.strip().decode()
    else:
        version = os.getenv("VERSION")

    # create a GitHub release
    if not skip_github:
        gh_auth = (gh_user, gh_token)
        body = {"tag_name": version}
        r = httpx.post(f"{BASE}/repos/{REPO}/releases", json=body, auth=gh_auth)
        r.raise_for_status()
        upload_url = r.json()["upload_url"]
        upload_url = upload_url[: upload_url.index("{")]  # get URL up to the first {

    for item in Path("dist").iterdir():
        print(f"Uploading: {item}")
        name = item.name

        if not skip_github:
            # upload releases to GitHub
            url = upload_url + f"?name={name}"
            headers = {"content-type": "application/tar+gzip"}
            with item.open("rb") as fo:
                print("Uploading to GitHub Enterprise")
                r = httpx.post(url, content=fo, headers=headers, auth=gh_auth)
                r.raise_for_status()

        if not skip_azure:
            # upload released to Azure
            url = f"{AZURE_BASE_URL}/{item.name}?{azure_token}"
            size = item.stat().st_size
            headers = {"x-ms-blob-type": "BlockBlob", "content-length": str(size)}
            with item.open("rb") as fo:
                print("Uploading to Azure Storage")
                r = httpx.put(url, content=fo, headers=headers)
                r.raise_for_status()

    if not skip_azure:
        update_azure_index()


def update_azure_index():
    # read existing info if exists
    cl = BlobServiceClient(account_url=f"{AZURE_ACCOUNT}?{azure_token}")
    cc = cl.get_container_client(AZURE_CONTAINER)

    groups = set()
    wheels = defaultdict(lambda: list())
    wheels_count = 0
    for blob in cc.list_blobs():
        if blob.name.endswith(".whl"):
            group = blob.name.split("-", 1)[0]
            group = re.sub(r"[-_.]+", "-", group).lower()
            groups.add((f"simple/{group}/", group))
            href = f"{AZURE_BASE_URL}/{blob.name}"
            wheels[group].append((href, blob.name))
            wheels_count += 1

    print(f"Azure: Found {wheels_count} wheels to index in {len(groups)} groups")

    def upload(loc, idx):
        content = jinja2.Template(INDEX_TEMPLATE).render(idx=idx)
        data = BytesIO(content.encode())
        data.seek(0)
        simple = cc.get_blob_client(loc)
        simple.upload_blob(
            data=data,
            overwrite=True,
            content_settings=ContentSettings(content_type="text/html"),
        )
        print(f"Uploaded index at {AZURE_BASE_URL}/{loc}")

    # add groups
    for loc, group in groups:
        idx = wheels[group]
        upload(loc, idx)


INDEX_TEMPLATE = """
<!DOCTYPE html>
<html>
  <head>
    <meta name="pypi:repository-version" content="1.0">
    <title>Simple index</title>
  </head>
  <body>
  {% for href, text in idx %}
    <a href="{{ href }}">{{ text }}</a>
  {% endfor %}
  </body>
</html>
  """

publish()
